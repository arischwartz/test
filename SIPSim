#!/usr/bin/env python

#--- Option parsing ---#
"""
SIPSim: simulate gradient fractionation of microbial community DNA

Usage:
  SIPSim <command> [<args>...]
  SIPSim -h | --help
  SIPSim --version

Options:
  -h --help     Show this screen.
  --version     Show version.

Commands:
  Genomes:
    renameGenomes -- formatting genome sequence names for SIPSim
    indexGenomes -- index genomes (required for amplicon-fragment simulation)
  Fragments:
    fragments -- Simulate genome fragments and calc fragment G+C content.
    fragment_kde -- make a 2d kernel density estimate of fragment buoyant density and length
  Community:
    gradientComms -- Simulate the original communities for each isopycnic gradient
  Diffusion:
    diffusion -- Incorporate gradient diffusion in G+C variance
  Isotope:
    incorpConfigExample -- create example isotope incorporation config file
    isoIncorp -- Simulate the amount of isotope incorporation for each taxon in each isopycnic gradient
    BD_shift -- Determine the shift in buoyant density based on KDE overlap
  Gradient fractions:
    gradient_fractions -- Simulate taxon abundances in each fraction of each isopycnic gradient
  OTUs:
    OTU_table -- simulate OTU table
    OTU_subsample -- simulate sequencing by subsampling from an OTU table
    OTU_wideLong -- convert OTU table from wide to long or vice versa
    OTU_sampleData -- make a 'sample_data' table (phyloseq) from the OTU table
    OTU_sum -- Sum OTU counts (by group)
  KDEs:
    KDE_bandwidth -- Get the bandwidth of each KDE

Description:
  Simulate how taxa would be distributed in isopycnic gradients as assessed by high throughput sequencing.
"""

import os, sys
from docopt import docopt
from subprocess import call

scriptDir = os.path.dirname(__file__)
subcmdDir = os.path.join(scriptDir, 'bin')

if __name__ == '__main__':
    args = docopt(__doc__,
                  version='0.1',
                  options_first=True)

    # calling subcommand scripts
    scriptFile = os.path.join(subcmdDir, args['<command>'] + '.py')
    if os.path.isfile(scriptFile):
        exit(call(['python', scriptFile] + args['<args>']))    
    else:
        exit('"{}" is not a SIPSim command. See "SIPSim -h".'.format(args['<command>']))
    
